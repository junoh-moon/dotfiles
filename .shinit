#!/usr/bin/env sh
# sh (POSIX) compatible configs

export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export MANPATH="$HOME"/.local/share/man:/usr/share/man:"$MANPATH"

# set PATH so it includes user's private bin if it exists
LOCALBIN="$HOME/.local/bin"
case "$PATH" in
"*$LOCALBIN*") ;;
*) PATH="$LOCALBIN:$PATH" ;;
esac

SNAPBIN="/snap/bin"
case "$PATH" in
"*$SNAPBIN*") ;;
*) PATH="$SNAPBIN:$PATH" ;;
esac

M1_SILICON_BREW_PATH="/opt/homebrew/bin"
case "$PATH" in
"*$M1_SILICON_BREW_PATH*") ;;
*) PATH="$M1_SILICON_BREW_PATH:$PATH" ;;
esac

BREW_PACKAGES_PATH=$HOME/.paths
if [ -f "$BREW_PACKAGES_PATH" ]; then
	NEW_PATHS=$(cat "$BREW_PACKAGES_PATH")
	PATH=$NEW_PATHS:$PATH
fi
if command -v nproc >/dev/null 2>&1; then
	export HOMEBREW_MAKE_JOBS=$(nproc --all)
else
	export HOMEBREW_MAKE_JOBS=4
fi

export LD_LIBRARY_PATH="$HOME"/.local/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}

[ -n "$DISPLAY" ] && export XAUTHORITY="$HOME"/.Xauthority

export EDITOR=vim

# Alias's to modified commands
if command -v rsync >/dev/null 2>&1; then
	alias cp='rsync -ah --info=progress2'
fi

alias ls='ls --human-readable --color=always'
alias ll='ls --human-readable -l --all --classify --size'

alias scp='scp -r'
alias mv='mv -i'
alias rm='rm -iv'
alias mkdir='mkdir -p'
alias ps='ps auxf'
alias ping='ping -c 10'
alias less='less -R'
alias lessn='less -R -N'
alias cls='clear'
alias vi='vim'
alias svi='sudo vi'
alias vis='vim "+set si"'
alias tmux='tmux -2'              #force 256 colors
alias psed='perl -pe'             #sed with pcre support
alias fd='fd --hidden'            #find dotfiles as well
alias rg='rg --auto-hybrid-regex' #Always allow look-ahead/behind

if command -v prename >/dev/null 2>&1; then
	alias rename=prename
fi

export BAT_THEME=gruvbox-dark

alias c='clear'

ocr() {
	tesseract -l kor+eng "$@" stdout
}

check_text_file() {
	filepath="$1"

	# Use the `file` command to check the file type
	file_output=$(file --brief --mime-type "$filepath")

	# Check if the file output contains "text"
	case "$file_output" in
	text/*)
		echo "The file is a text file."
		return 0
		;;
	application/json*)
		echo "The file is a text file."
		return 0
		;;
	*)
		echo "The file is not a text file."
		return 1
		;;
	esac
}

# Alias of xdg-open, and ignore stderr
open() {

	# If a file is a text file, open it with the editor
	if check_text_file "$1" >/dev/null; then
		$EDITOR "$1"
		return
	fi

	# Use the appropriate command for the platform to open other files
	if [ "$(uname)" = "Darwin" ]; then
		/usr/bin/open "$@"
	else
		xdg-open "$@" 2>/dev/null
	fi
}

alias gpull='git pull --rebase origin'
alias gpush='git push origin'
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gcm='git commit -m'
alias gf='git fetch'
alias gb='git branch'
alias gck='git checkout'
alias glog='git log --all --decorate --oneline --graph'
alias gd='git difftool'
alias grm='git add -u'

alias countfiles="for t in files links directories; do echo \`find . -type \${t:0:1} | wc -l\` \$t; done 2> /dev/null"
alias folders='du -h --max-depth=1'
alias folderssort='find . -maxdepth 1 -type d -print0 | xargs -0 du -sk | sort -rn'
alias tree='tree -CAhF --dirsfirst'
alias treed='tree -CAFd'

mountedinfo() {
	case $1 in
	-h | --help)
		printf "Shows mounted file system information\n"
		printf "Usage: %s [--all]\n" "$0"
		;;
	-a | --all)
		df --human-readable --print-type
		;;
	*)
		df --human-readable --print-type --type ext4
		;;
	esac
}

# Search files in the current folder
alias f="find ."

# alias chmod commands
alias mx='chmod a+x'
alias 000='chmod -R 000'
alias 644='chmod -R 644'
alias 666='chmod -R 666'
alias 755='chmod -R 755'
alias 777='chmod -R 777'

#alias htop="htop -u $(whoami)"
alias htop="htop -s PERCENT_CPU"

alias tmux-dev='$HOME/.dotfiles/tmux-dev.sh'
alias qq='tmux kill-window'

if command -v nvim >/dev/null 2>&1; then
	alias vim=nvim
	alias vimdiff='nvim -d'
fi

if command -v viddy >/dev/null 2>&1; then
	alias watch='viddy -s -d'
fi

export FZF_DEFAULT_OPTS='-m --bind=ctrl-space:toggle,tab:down,shift-tab:up'
if command -v bfs >/dev/null 2>&1; then
	export FZF_DEFAULT_COMMAND='bfs -follow'
	export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND -type d 2> /dev/null"
elif command -v fd >/dev/null 2>&1; then
	export FZF_DEFAULT_COMMAND='fd --follow'
	export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND --type d 2> /dev/null"
fi
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND 2> /dev/null"

if command -v gdircolors >/dev/null 2>&1; then
	eval "$(gdircolors "$HOME"/.dircolors)"
else
	eval "$(dircolors "$HOME"/.dircolors)"
fi

# Load sdkman
[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ] && . "$HOME/.sdkman/bin/sdkman-init.sh"

if [ -f "$HOME/.cargo/env" ]; then
	. "$HOME/.cargo/env"
fi

if [ -d "$HOME/.cargo/bin" ]; then
	PATH=$PATH:$HOME/.cargo/bin
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
export KUBECONFIG="$HOME"/.kube/config

command -v javac >/dev/null 2>&1 && export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which javac))))
